@page "/eye"
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using System.Text.Json.Serialization

<div class="container">
    <div class="row">
        <div class="col-8">
            <div class="v3d">
                <canvas id="threeCanvas"></canvas>
            </div>
        </div>
        <div class="col-4">
            <div class="side-panel">
                @if (SelectedPoint != null)
                {
                    <h3>@SelectedPoint.Place</h3>
                    <p>@SelectedPoint.Description</p>
                }
                else
                {
                    <p>Click a point on the eye model to view details.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private ModelPoint? SelectedPoint;

    // Path to the eye.glb model
    private string ModelPath => "models/eyes_anatomy.glb";

    // Define 10 points for the eye model
    private List<ModelPoint> ModelPoints => new()
    {
         new ModelPoint
    {
        Place = "Cornea",
        Description = "Cornea: Transparent front layer of the eye that refracts light.",
        Id = "point1",
        Position = new float[] { 0.0f, 0.1f, 0.2f }
    },
    new ModelPoint
    {
        Place = "Iris",
        Description = "Iris: Colored part of the eye that controls pupil size.",
        Id = "point2",
        Position = new float[] { 0.0f, 0.05f, 0.15f }
    },
    new ModelPoint
    {
        Place = "Pupil",
        Description = "Pupil: Opening in the iris that regulates light entry.",
        Id = "point3",
        Position = new float[] { 0.0f, 0.05f, 0.18f }
    },
    new ModelPoint
    {
        Place = "Lens",
        Description = "Lens: Focuses light onto the retina.",
        Id = "point4",
        Position = new float[] { 0.0f, 0.0f, 0.1f }
    },
    new ModelPoint
    {
        Place = "Retina",
        Description = "Retina: Light-sensitive layer at the back of the eye.",
        Id = "point5",
        Position = new float[] { 0.0f, -0.05f, 0.0f }
    },
    new ModelPoint
    {
        Place = "Optic Nerve",
        Description = "Optic Nerve: Transmits visual information to the brain.",
        Id = "point6",
        Position = new float[] { -0.1f, -0.1f, -0.1f }
    },
    new ModelPoint
    {
        Place = "Sclera",
        Description = "Sclera: White outer protective layer of the eye.",
        Id = "point7",
        Position = new float[] { 0.1f, 0.0f, 0.15f }
    },
    new ModelPoint
    {
        Place = "Conjunctiva",
        Description = "Conjunctiva: Thin membrane covering the sclera and inside eyelids.",
        Id = "point8",
        Position = new float[] { 0.1f, 0.1f, 0.1f }
    },
    new ModelPoint
    {
        Place = "Macula",
        Description = "Macula: Central area of the retina responsible for detailed vision.",
        Id = "point9",
        Position = new float[] { 0.0f, -0.1f, 0.0f }
    },
    new ModelPoint
    {
        Place = "Choroid",
        Description = "Choroid: Layer containing blood vessels between retina and sclera.",
        Id = "point10",
        Position = new float[] { 0.0f, -0.05f, -0.05f }
    },
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Three.js with the model path and points
            await JSRuntime.InvokeVoidAsync("initThreeJs", "threeCanvas", ModelPath, ModelPoints);
            // Register the callback for point clicks
            await JSRuntime.InvokeVoidAsync("registerClickCallback", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnPointClicked(string pointId)
    {
        // Update the selected point and refresh the UI
        SelectedPoint = ModelPoints.FirstOrDefault(p => p.Id == pointId);
        StateHasChanged();
    }

    public class ModelPoint
    {
        [JsonPropertyName("place")]
        public string Place { get; set; } = string.Empty;

        [JsonPropertyName("description")]
        public string Description { get; set; } = string.Empty;

        [JsonPropertyName("id")]
        public string Id { get; set; } = string.Empty;

        [JsonPropertyName("position")]
        public float[] Position { get; set; } = Array.Empty<float>();
    }
}